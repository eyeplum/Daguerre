;; So, why does foo.c print `array[0] = 10` ?

;; Let's look at the assembly (these are the highlights, full assembly is in foo.s):

movl	$1, %edi          ;; store parameter of the first foo() function call to %edi


                        ;; the first foo() function call

pushq	%rbp              ;; because we are running in x86_64, something like this happened: %rbp = %rbp - 8
leaq	-8(%rbp), %rax    ;; store the address of %rbp - 8 in %rax (this makes %rax referencing -8(%rbp))
movl	%edi, -8(%rbp)    ;; store %edi in %rbp - 8
popq	%rbp              ;; something like this happened: %rbp = %rbp + 8

                        ;; end of the first foo() function call


movl	$10, %edi         ;; store the parameter of the second foo() function call to %edi
movq	%rax, -16(%rbp)   ;; move the return value of the previous function call from %rax to %rbp - 16


                        ;; the second foo() function call

pushq	%rbp              ;; because we are running in x86_64, something like this happened: %rbp = %rbp - 8
leaq	-8(%rbp), %rax    ;; store the address of %rbp - 8 in %rax (this makes %rax referencing -8(%rbp))
movl	%edi, -8(%rbp)    ;; store %edi in %rbp - 8
                        
                        ;; something wierd happened, the address of %rbp - 8 after push in the main()
                        ;; function's perspective is actually (%rbp - 8) - 8, which is %rbp - 16
                        ;; which is exactly the same as where the return value of the previous foo()
                        ;; function call stored

popq	%rbp              ;; something like this happened: %rbp = %rbp + 8

                        ;; end of the second foo() function call

                        ;; at this point, the value of %rax has already been over written by the second
                        ;; foo() function call, thus we have the `array[0] = 10` result

;; This is actually a good example of the `undefined behavior` works by coincidence
;; surely, we should never count on this kind of behavior.

;; Is there a way to break this?

